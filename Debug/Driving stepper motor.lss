
Driving stepper motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000172  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000172  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000094b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000097a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003e3  00000000  00000000  000009aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000014f  00000000  00000000  00000d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000279  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000014f  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027e  00000000  00000000  000012eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001569  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  64:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <stepper_clockwise>:
#define MOTOR_DDR DDRD
#define MOTOR_PORT PORTD
void stepper_clockwise(unsigned char rounds)
{
	unsigned char i;
	for (i=0;i<rounds;i++)
  6c:	88 23       	and	r24, r24
  6e:	81 f1       	breq	.+96     	; 0xd0 <stepper_clockwise+0x64>
  70:	90 e0       	ldi	r25, 0x00	; 0
	{
		 PORTD=0x01;
  72:	51 e0       	ldi	r21, 0x01	; 1
		 _delay_ms(500);
		 PORTD=0x04;
  74:	44 e0       	ldi	r20, 0x04	; 4
		 _delay_ms(500);
		 PORTD=0x02;
  76:	32 e0       	ldi	r19, 0x02	; 2
		_delay_ms(500);
		 PORTD=0x08;
  78:	28 e0       	ldi	r18, 0x08	; 8
void stepper_clockwise(unsigned char rounds)
{
	unsigned char i;
	for (i=0;i<rounds;i++)
	{
		 PORTD=0x01;
  7a:	52 bb       	out	0x12, r21	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	6f ef       	ldi	r22, 0xFF	; 255
  7e:	79 e6       	ldi	r23, 0x69	; 105
  80:	e8 e1       	ldi	r30, 0x18	; 24
  82:	61 50       	subi	r22, 0x01	; 1
  84:	70 40       	sbci	r23, 0x00	; 0
  86:	e0 40       	sbci	r30, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <stepper_clockwise+0x16>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <stepper_clockwise+0x20>
  8c:	00 00       	nop
		 _delay_ms(500);
		 PORTD=0x04;
  8e:	42 bb       	out	0x12, r20	; 18
  90:	6f ef       	ldi	r22, 0xFF	; 255
  92:	79 e6       	ldi	r23, 0x69	; 105
  94:	e8 e1       	ldi	r30, 0x18	; 24
  96:	61 50       	subi	r22, 0x01	; 1
  98:	70 40       	sbci	r23, 0x00	; 0
  9a:	e0 40       	sbci	r30, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <stepper_clockwise+0x2a>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <stepper_clockwise+0x34>
  a0:	00 00       	nop
		 _delay_ms(500);
		 PORTD=0x02;
  a2:	32 bb       	out	0x12, r19	; 18
  a4:	6f ef       	ldi	r22, 0xFF	; 255
  a6:	79 e6       	ldi	r23, 0x69	; 105
  a8:	e8 e1       	ldi	r30, 0x18	; 24
  aa:	61 50       	subi	r22, 0x01	; 1
  ac:	70 40       	sbci	r23, 0x00	; 0
  ae:	e0 40       	sbci	r30, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <stepper_clockwise+0x3e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <stepper_clockwise+0x48>
  b4:	00 00       	nop
		_delay_ms(500);
		 PORTD=0x08;
  b6:	22 bb       	out	0x12, r18	; 18
  b8:	6f ef       	ldi	r22, 0xFF	; 255
  ba:	79 e6       	ldi	r23, 0x69	; 105
  bc:	e8 e1       	ldi	r30, 0x18	; 24
  be:	61 50       	subi	r22, 0x01	; 1
  c0:	70 40       	sbci	r23, 0x00	; 0
  c2:	e0 40       	sbci	r30, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <stepper_clockwise+0x52>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <stepper_clockwise+0x5c>
  c8:	00 00       	nop
#define MOTOR_DDR DDRD
#define MOTOR_PORT PORTD
void stepper_clockwise(unsigned char rounds)
{
	unsigned char i;
	for (i=0;i<rounds;i++)
  ca:	9f 5f       	subi	r25, 0xFF	; 255
  cc:	98 13       	cpse	r25, r24
  ce:	d5 cf       	rjmp	.-86     	; 0x7a <stepper_clockwise+0xe>
  d0:	08 95       	ret

000000d2 <stepper_anticlockwise>:
	}
}
void stepper_anticlockwise(unsigned char rounds)
{
	unsigned char i;
	for (i=0;i<rounds;i++)
  d2:	88 23       	and	r24, r24
  d4:	81 f1       	breq	.+96     	; 0x136 <stepper_anticlockwise+0x64>
  d6:	90 e0       	ldi	r25, 0x00	; 0
	{
		PORTD=0x08;
  d8:	58 e0       	ldi	r21, 0x08	; 8
		_delay_ms(500);
		PORTD=0x02;
  da:	42 e0       	ldi	r20, 0x02	; 2
		_delay_ms(400);
		PORTD=0x04;
  dc:	34 e0       	ldi	r19, 0x04	; 4
		_delay_ms(500);
		PORTD=0x01;
  de:	21 e0       	ldi	r18, 0x01	; 1
void stepper_anticlockwise(unsigned char rounds)
{
	unsigned char i;
	for (i=0;i<rounds;i++)
	{
		PORTD=0x08;
  e0:	52 bb       	out	0x12, r21	; 18
  e2:	6f ef       	ldi	r22, 0xFF	; 255
  e4:	79 e6       	ldi	r23, 0x69	; 105
  e6:	e8 e1       	ldi	r30, 0x18	; 24
  e8:	61 50       	subi	r22, 0x01	; 1
  ea:	70 40       	sbci	r23, 0x00	; 0
  ec:	e0 40       	sbci	r30, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <stepper_anticlockwise+0x16>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <stepper_anticlockwise+0x20>
  f2:	00 00       	nop
		_delay_ms(500);
		PORTD=0x02;
  f4:	42 bb       	out	0x12, r20	; 18
  f6:	6f ef       	ldi	r22, 0xFF	; 255
  f8:	77 e8       	ldi	r23, 0x87	; 135
  fa:	e3 e1       	ldi	r30, 0x13	; 19
  fc:	61 50       	subi	r22, 0x01	; 1
  fe:	70 40       	sbci	r23, 0x00	; 0
 100:	e0 40       	sbci	r30, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <stepper_anticlockwise+0x2a>
 104:	00 c0       	rjmp	.+0      	; 0x106 <stepper_anticlockwise+0x34>
 106:	00 00       	nop
		_delay_ms(400);
		PORTD=0x04;
 108:	32 bb       	out	0x12, r19	; 18
 10a:	6f ef       	ldi	r22, 0xFF	; 255
 10c:	79 e6       	ldi	r23, 0x69	; 105
 10e:	e8 e1       	ldi	r30, 0x18	; 24
 110:	61 50       	subi	r22, 0x01	; 1
 112:	70 40       	sbci	r23, 0x00	; 0
 114:	e0 40       	sbci	r30, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <stepper_anticlockwise+0x3e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <stepper_anticlockwise+0x48>
 11a:	00 00       	nop
		_delay_ms(500);
		PORTD=0x01;
 11c:	22 bb       	out	0x12, r18	; 18
 11e:	6f ef       	ldi	r22, 0xFF	; 255
 120:	79 e6       	ldi	r23, 0x69	; 105
 122:	e8 e1       	ldi	r30, 0x18	; 24
 124:	61 50       	subi	r22, 0x01	; 1
 126:	70 40       	sbci	r23, 0x00	; 0
 128:	e0 40       	sbci	r30, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <stepper_anticlockwise+0x52>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <stepper_anticlockwise+0x5c>
 12e:	00 00       	nop
	}
}
void stepper_anticlockwise(unsigned char rounds)
{
	unsigned char i;
	for (i=0;i<rounds;i++)
 130:	9f 5f       	subi	r25, 0xFF	; 255
 132:	98 13       	cpse	r25, r24
 134:	d5 cf       	rjmp	.-86     	; 0xe0 <stepper_anticlockwise+0xe>
 136:	08 95       	ret

00000138 <main>:
		_delay_ms(500);
	}
}
int main(void)
{
	MOTOR_DDR=0xFF;
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	81 bb       	out	0x11, r24	; 17
		 _delay_ms(500);
		 PORTD=0x02;
		 _delay_ms(500);
		 PORTD=0x08;
		 _delay_ms(500);*/
		stepper_clockwise(5);
 13c:	85 e0       	ldi	r24, 0x05	; 5
 13e:	0e 94 36 00 	call	0x6c	; 0x6c <stepper_clockwise>
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	87 ea       	ldi	r24, 0xA7	; 167
 146:	91 e6       	ldi	r25, 0x61	; 97
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x10>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x1a>
 152:	00 00       	nop
		_delay_ms(2000);
		stepper_anticlockwise(5);
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	0e 94 69 00 	call	0xd2	; 0xd2 <stepper_anticlockwise>
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	87 ea       	ldi	r24, 0xA7	; 167
 15e:	91 e6       	ldi	r25, 0x61	; 97
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x28>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x32>
 16a:	00 00       	nop
 16c:	e7 cf       	rjmp	.-50     	; 0x13c <main+0x4>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
